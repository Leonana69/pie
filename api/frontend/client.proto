syntax = "proto3";

package client;

// Client -> Server
message Request {
  // Optional unique identifier to correlate requests and responses.
  string request_id = 1;

  oneof command {
    QueryProgram         query_program         = 2;
    UploadProgramChunk   upload_program_chunk  = 3;
    StartProgram         start_program         = 4;
    SendEvent            send_event            = 5;
    TerminateProgram     terminate_program     = 6;
  }
}

message QueryProgram {
  // The program identifier to check for existence.
  string hash = 1;
}

message UploadProgramChunk {
  // Identifier of the program.
  string hash = 1;
  // The current chunk index (starting at 0).
  uint32 chunk_index = 2;
  // Total number of chunks for this program upload.
  uint32 total_chunks = 3;
  // The binary data of this chunk.
  bytes chunk_data = 4;
}

message StartProgram {
  // The hash of the program to start.
  string hash = 1;
}

message SendEvent {
  // The instance that is receiving the event.
  string instance_id = 1;
  // The event payload.
  string event_data = 2;
}

message TerminateProgram {
  // The instance to terminate.
  string instance_id = 1;
}

// Server -> Client
message Response {
  // Echo back the request_id if provided.
  string request_id = 1;

  oneof reply {
    QueryResponse     query_response     = 2;
    UploadAck         upload_ack         = 3;
    UploadComplete    upload_complete    = 4;
    ProgramLaunched   program_launched   = 5;
    ProgramEvent      program_event      = 6;
    ProgramTerminated program_terminated = 7;
    Error             error              = 8;
  }
}

message QueryResponse {
  string hash = 1;
  // Indicates whether the program exists.
  bool exists = 2;
}

message UploadAck {
  string hash = 1;
  // The index of the chunk that was successfully received.
  uint32 chunk_index = 2;
}

message UploadComplete {
  // The program upload has completed.
  string hash = 1;
}

message ProgramLaunched {
  // The hash of the program that was launched.
  string hash = 1;
  // The newly created instance identifier.
  string instance_id = 2;
}

message ProgramEvent {
  string instance_id = 1;
  // The event payload from the program.
  string event_data = 2;
}

message ProgramTerminated {
  string instance_id = 1;
  // A human-readable reason for termination.
  string reason = 2;
}

message Error {
  // A human-readable error message.
  string error_message = 1;
}