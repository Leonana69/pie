#!/usr/bin/env bash
#
# pre-commit hook: Run pylint and black on staged Python files

set -e

# Check for uv in PATH
if ! command -v uv &> /dev/null; then
  echo "Error: uv not found in your PATH."
  echo "   Please install uv or add it to your PATH."
  exit 1
fi

# Use the uv managed pylint to avoid import errors
# Disabling refactor warnings for now
pylint_cmd="uv --project backend/backend-python run pylint --disable=R"

# Black formatting check command
black_cmd="uv --project backend/backend-python run black --check --quiet"

# Gather all staged .py files
staged_py=$(git diff --cached --name-only --diff-filter=ACM | grep '\.py$') || true

# Nothing to lint
if [[ -z "$staged_py" ]]; then
  exit 0
fi

# Run pylint on each file and report problematic files
problematic_files=()
declare -A error_messages

for file in $staged_py; do
  error_output=$($pylint_cmd "$file" 2>&1) || {
    problematic_files+=("$file")
    error_messages["$file"]="$error_output"
  }
done

# Run black formatting check on each file
formatting_issues=()
declare -A formatting_messages

for file in $staged_py; do
  error_output=$($black_cmd "$file" 2>&1) || {
    formatting_issues+=("$file")
    formatting_messages["$file"]="$error_output"
  }
done

if [[ ${#problematic_files[@]} -gt 0 || ${#formatting_issues[@]} -gt 0 ]]; then
  echo "Error: Issues found in staged files."
  
  if [[ ${#problematic_files[@]} -gt 0 ]]; then
    echo ""
    echo "Pylint issues in:"
    for file in "${problematic_files[@]}"; do
      echo "   - $file"
    done
  fi
  
  if [[ ${#formatting_issues[@]} -gt 0 ]]; then
    echo ""
    echo "Black formatting issues in:"
    for file in "${formatting_issues[@]}"; do
      echo "   - $file"
    done
  fi
  
  echo ""
  echo "Detailed error messages:"
  echo "========================"
  
  if [[ ${#problematic_files[@]} -gt 0 ]]; then
    echo ""
    echo "Pylint errors:"
    echo "--------------"
    for file in "${problematic_files[@]}"; do
      echo ""
      echo "File: $file"
      echo "---"
      echo "${error_messages[$file]}"
    done
  fi
  
  if [[ ${#formatting_issues[@]} -gt 0 ]]; then
    echo ""
    echo "Black formatting issues:"
    echo "------------------------"
    for file in "${formatting_issues[@]}"; do
      echo ""
      echo "File: $file"
      echo "---"
      echo "${formatting_messages[$file]}"
    done
    echo ""
    echo "To fix formatting issues, run: uv --project backend/backend-python run black <filename>"
  fi
  
  echo ""
  echo "Commit aborted. Fix the above errors or stage only clean files."
  exit 1
fi

# All good
exit 0
