syntax = "proto3";

package sdi;

// -----------------------------------------------------------------------------
// Enum for kinds of objects.
// -----------------------------------------------------------------------------
enum ObjectKind {
  // Default or unspecified kind.
  OBJECT_KIND_UNSPECIFIED = 0;

  // Key-value block.
  OBJECT_KIND_KV_BLOCK = 1;

  // Embedding.
  OBJECT_KIND_EMB = 2;

  // Distribution.
  OBJECT_KIND_DIST = 3;
}

// -----------------------------------------------------------------------------
// Allocate and Deallocate messages.
// -----------------------------------------------------------------------------

message Allocate {
  // The kind of object to allocate.
  ObjectKind kind = 1;
  // The number of objects to allocate.
  uint32 object_id_offset = 2;
  uint32 count = 3;
}

// A request to allocate objects of a certain kind with specified IDs.
message BatchAllocate {
  repeated Allocate items = 1;
}

// A request to deallocate objects of a certain kind with specified IDs.
message BatchDeallocate {
  repeated Allocate items = 1;
}

// -----------------------------------------------------------------------------
// Embedding messages.
// -----------------------------------------------------------------------------

message EmbedText {
  // Embedding IDs to produce/associate with this text.
  uint32 embedding_id = 1;
  // The token IDs for the text to be embedded.
  uint32 token_id = 2;
  // The position IDs corresponding to each token.
  uint32 position_id = 3;
}

// A request to generate text embeddings.
message BatchEmbedText {
  // Embedding IDs to produce/associate with this text.
  repeated EmbedText items = 1;
}

// A single image embedding specification.
message EmbedImage {
  // Embedding IDs to store or associate with the image.
  repeated uint32 embedding_ids = 1;
  // The URL of the image to embed.
  string url = 2;
}

// A request to embed one or more images.
message BatchEmbedImage {
  // A batch of image embedding items.
  repeated EmbedImage items = 1;
}

// -----------------------------------------------------------------------------
// Block fill, mask, and copy messages.
// -----------------------------------------------------------------------------

// A single block fill specification.
message FillBlock {
  // The ID of the block to fill.
  uint32 block_id = 1;
  // IDs of blocks providing context for the fill operation.
  repeated uint32 context_block_ids = 2;
  // Input embeddings that seed the fill.
  repeated uint32 input_embedding_ids = 3;
  // Output embeddings produced by the fill.
  repeated uint32 output_embedding_ids = 4;
}

// A request to fill one or more blocks.
message BatchFillBlock {
  // A batch of block fill items.
  repeated FillBlock items = 1;
}

// A single mask specification for a block.
message MaskBlock {
  // The ID of the block being masked.
  uint32 block_id = 1;
  // A flattened 2D mask (row-major order) represented as booleans.
  repeated bool mask = 2;
}

// A request to apply one or more boolean masks to blocks.
message BatchMaskBlock {
  // A batch of block mask items.
  repeated MaskBlock items = 1;
}

// A single copy specification for data between blocks.
message CopyBlock {
  // The source block ID.
  uint32 source_block_id = 1;
  // The destination block ID.
  uint32 destination_block_id = 2;
  // The starting position in the source block.
  uint32 source_start = 3;
  // The starting position in the destination block.
  uint32 destination_start = 4;
  // The number of elements to copy.
  uint32 length = 5;
}

// A request to copy data between blocks.
message BatchCopyBlock {
  // A batch of block copy items.
  repeated CopyBlock items = 1;
}

// -----------------------------------------------------------------------------
// Decode request/response messages.
// -----------------------------------------------------------------------------

message DecodeTokenDistribution {
  // The embedding ID to decode.
  uint32 embedding_id = 1;
  uint32 distribution_id = 2;
}

// A request to decode a sequence of embeddings into tokens.
message BatchDecodeTokenDistribution {

  // The embedding IDs to decode.
  repeated DecodeTokenDistribution items = 1;
}

message SampleTopKRequest {
  // The distribution to sample from.
  uint32 distribution_id = 1;
  // The number of samples to draw.
  uint32 k = 2;
}

message BatchSampleTopKRequest {
  // The sampling request items.
  repeated SampleTopKRequest items = 1;
}

// The response containing decoded tokens.
message SampleTopKResponse {
  // The decoded token IDs.
  repeated uint32 token_ids = 1;
}

message BatchSampleTopKResponse {
  // The response items.
  repeated SampleTopKResponse items = 1;
}

message GetTokenDistributionRequest {
  // The distribution ID to retrieve.
  uint32 distribution_id = 1;
}


message BatchGetTokenDistributionRequest {
  // The distribution ID to retrieve.
  repeated GetTokenDistributionRequest items = 1;
}

message GetTokenDistributionResponse {
  // The distribution.
  repeated float distribution = 1;
}

message BatchGetTokenDistributionResponse {
  // The distribution.
  repeated GetTokenDistributionResponse items = 1;
}

// -----------------------------------------------------------------------------


message Request {
  uint32 correlation_id = 1;

  oneof command {
    BatchAllocate allocate = 2;
    BatchDeallocate deallocate = 3;
    BatchEmbedText embed_text = 4;
    BatchEmbedImage embed_image = 5;
    BatchFillBlock fill_block = 6;
    BatchMaskBlock mask_block = 7;
    BatchCopyBlock copy_block = 8;
    BatchDecodeTokenDistribution decode_token_distribution = 9;
    BatchSampleTopKRequest sample_top_k_request = 10;
    BatchGetTokenDistributionRequest get_token_distribution = 11;
  }
}


message Response {
  uint32 correlation_id = 1;

  oneof payload {
    BatchSampleTopKResponse sample_top_k = 2;
    BatchGetTokenDistributionResponse get_token_distribution = 3;
  }
}