syntax = "proto3";

package sdi;

// -----------------------------------------------------------------------------
// Enum for kinds of objects.
// -----------------------------------------------------------------------------
enum ObjectKind {
  // Default or unspecified kind.
  OBJECT_KIND_UNSPECIFIED = 0;

  // Key-value block.
  OBJECT_KIND_KV_BLOCK = 1;

  // Embedding.
  OBJECT_KIND_EMB = 2;

  // Distribution.
  OBJECT_KIND_DIST = 3;
}

// -----------------------------------------------------------------------------
// Allocate and Deallocate messages.
// -----------------------------------------------------------------------------

message AllocateItem {
  // The kind of object to allocate.
  ObjectKind kind = 1;
  // The number of objects to allocate.
  uint32 object_id_offset = 2;
  uint32 count = 3;
}

// A request to allocate objects of a certain kind with specified IDs.
message Allocate {
  repeated AllocateItem items = 1;
}

// A request to deallocate objects of a certain kind with specified IDs.
message Deallocate {
  repeated AllocateItem items = 1;
}

// -----------------------------------------------------------------------------
// Embedding messages.
// -----------------------------------------------------------------------------

message EmbedTextItem {
  // Embedding IDs to produce/associate with this text.
  uint32 embedding_id = 1;
  // The token IDs for the text to be embedded.
  uint32 token_id = 2;
  // The position IDs corresponding to each token.
  uint32 position_id = 3;
}

// A request to generate text embeddings.
message EmbedText {
  // Embedding IDs to produce/associate with this text.
  repeated EmbedTextItem items = 1;
}

// A single image embedding specification.
message EmbedImageItem {
  // Embedding IDs to store or associate with the image.
  repeated uint32 embedding_ids = 1;
  // The URL of the image to embed.
  string url = 2;
}

// A request to embed one or more images.
message EmbedImage {
  // A batch of image embedding items.
  repeated EmbedImageItem items = 1;
}

// -----------------------------------------------------------------------------
// Block fill, mask, and copy messages.
// -----------------------------------------------------------------------------

// A single block fill specification.
message FillBlockItem {
  // The ID of the block to fill.
  uint32 block_id = 1;
  // IDs of blocks providing context for the fill operation.
  repeated uint32 context_block_ids = 2;
  // Input embeddings that seed the fill.
  repeated uint32 input_embedding_ids = 3;
  // Output embeddings produced by the fill.
  repeated uint32 output_embedding_ids = 4;
}

// A request to fill one or more blocks.
message FillBlock {
  // A batch of block fill items.
  repeated FillBlockItem items = 1;
}

// A single mask specification for a block.
message MaskBlockItem {
  // The ID of the block being masked.
  uint32 block_id = 1;
  // A flattened 2D mask (row-major order) represented as booleans.
  repeated bool mask = 2;
}

// A request to apply one or more boolean masks to blocks.
message MaskBlock {
  // A batch of block mask items.
  repeated MaskBlockItem items = 1;
}

// A single copy specification for data between blocks.
message CopyBlockItem {
  // The source block ID.
  uint32 source_block_id = 1;
  // The destination block ID.
  uint32 destination_block_id = 2;
  // The starting position in the source block.
  uint32 source_start = 3;
  // The starting position in the destination block.
  uint32 destination_start = 4;
  // The number of elements to copy.
  uint32 length = 5;
}

// A request to copy data between blocks.
message CopyBlock {
  // A batch of block copy items.
  repeated CopyBlockItem items = 1;
}

// -----------------------------------------------------------------------------
// Decode request/response messages.
// -----------------------------------------------------------------------------

message DecodeRequestItem {
  // The embedding ID to decode.
  uint32 embedding_id = 1;
}

// A request to decode a sequence of embeddings into tokens.
message DecodeRequest {

  // The embedding IDs to decode.
  repeated DecodeRequestItem items = 1;
}

// The response containing decoded tokens.
message DecodeResponse {
  // The request identifier to which this response corresponds.
  uint32 request_id = 1;
  // The decoded token IDs.
  repeated uint32 token_ids = 2;
}

message Command {
  uint32 correlation_id = 1;

  oneof payload {
    Allocate allocate = 2;
    Deallocate deallocate = 3;
    EmbedText embed_text = 4;
    EmbedImage embed_image = 5;
    FillBlock fill_block = 6;
    MaskBlock mask_block = 7;
    CopyBlock copy_block = 8;
    DecodeRequest decode_request = 9;
  }
}


message Event {
  uint32 correlation_id = 1;

  oneof payload {
    DecodeResponse decode_response = 2;
  }
}