// This file is @generated by prost-build.
/// A single image embedding specification.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EmbedImage {
    /// Embedding IDs to store or associate with the image.
    #[prost(uint32, repeated, tag = "1")]
    pub embedding_ids: ::prost::alloc::vec::Vec<u32>,
    /// The URL of the image to embed.
    #[prost(bytes = "vec", tag = "2")]
    pub image_blob: ::prost::alloc::vec::Vec<u8>,
}
/// A request to embed one or more images.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchEmbedImage {
    /// A batch of image embedding items.
    #[prost(message, repeated, tag = "1")]
    pub items: ::prost::alloc::vec::Vec<EmbedImage>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Request {
    #[prost(uint32, tag = "1")]
    pub correlation_id: u32,
    #[prost(oneof = "request::Command", tags = "2")]
    pub command: ::core::option::Option<request::Command>,
}
/// Nested message and enum types in `Request`.
pub mod request {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Command {
        /// BatchEmbedVideo embed_video = 3;
        #[prost(message, tag = "2")]
        EmbedImage(super::BatchEmbedImage),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Response {
    #[prost(uint32, tag = "1")]
    pub correlation_id: u32,
}
