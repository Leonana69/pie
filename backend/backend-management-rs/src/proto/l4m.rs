// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Allocate {
    /// The kind of object to allocate.
    #[prost(enumeration = "ObjectKind", tag = "1")]
    pub kind: i32,
    /// The number of objects to allocate.
    #[prost(uint32, tag = "2")]
    pub object_id_offset: u32,
    #[prost(uint32, tag = "3")]
    pub count: u32,
}
/// A request to allocate objects of a certain kind with specified IDs.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchAllocate {
    #[prost(message, repeated, tag = "1")]
    pub items: ::prost::alloc::vec::Vec<Allocate>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Deallocate {
    /// The kind of object to deallocate.
    #[prost(enumeration = "ObjectKind", tag = "1")]
    pub kind: i32,
    /// The number of objects to deallocate.
    #[prost(uint32, tag = "2")]
    pub object_id_offset: u32,
    #[prost(uint32, tag = "3")]
    pub count: u32,
}
/// A request to deallocate objects of a certain kind with specified IDs.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchDeallocate {
    #[prost(message, repeated, tag = "1")]
    pub items: ::prost::alloc::vec::Vec<Deallocate>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EmbedText {
    /// Embedding IDs to produce/associate with this text.
    #[prost(uint32, tag = "1")]
    pub embedding_id: u32,
    /// The token IDs for the text to be embedded.
    #[prost(uint32, tag = "2")]
    pub token_id: u32,
    /// The position IDs corresponding to each token.
    #[prost(uint32, tag = "3")]
    pub position_id: u32,
}
/// A request to generate text embeddings.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchEmbedText {
    /// Embedding IDs to produce/associate with this text.
    #[prost(message, repeated, tag = "1")]
    pub items: ::prost::alloc::vec::Vec<EmbedText>,
}
/// A single block fill specification.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FillBlock {
    /// The ID of the block to fill.
    #[prost(uint32, tag = "1")]
    pub last_block_len: u32,
    /// IDs of blocks providing context for the fill operation.
    #[prost(uint32, repeated, tag = "2")]
    pub context_block_ids: ::prost::alloc::vec::Vec<u32>,
    /// Input embeddings that seed the fill.
    #[prost(uint32, repeated, tag = "3")]
    pub input_embedding_ids: ::prost::alloc::vec::Vec<u32>,
    /// Output embeddings produced by the fill.
    #[prost(uint32, repeated, tag = "4")]
    pub output_embedding_ids: ::prost::alloc::vec::Vec<u32>,
}
/// A request to fill one or more blocks.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchFillBlock {
    /// A batch of block fill items.
    #[prost(message, repeated, tag = "1")]
    pub items: ::prost::alloc::vec::Vec<FillBlock>,
}
/// A single mask specification for a block.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MaskBlock {
    /// The ID of the block being masked.
    #[prost(uint32, tag = "1")]
    pub block_id: u32,
    /// A flattened 2D mask (row-major order) represented as booleans.
    #[prost(bool, repeated, tag = "2")]
    pub mask: ::prost::alloc::vec::Vec<bool>,
}
/// A request to apply one or more boolean masks to blocks.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchMaskBlock {
    /// A batch of block mask items.
    #[prost(message, repeated, tag = "1")]
    pub items: ::prost::alloc::vec::Vec<MaskBlock>,
}
/// A single copy specification for data between blocks.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CopyBlock {
    /// The source block ID.
    #[prost(uint32, tag = "1")]
    pub source_block_id: u32,
    /// The destination block ID.
    #[prost(uint32, tag = "2")]
    pub destination_block_id: u32,
    /// The starting position in the source block.
    #[prost(uint32, tag = "3")]
    pub source_start: u32,
    /// The starting position in the destination block.
    #[prost(uint32, tag = "4")]
    pub destination_start: u32,
    /// The number of elements to copy.
    #[prost(uint32, tag = "5")]
    pub length: u32,
}
/// A request to copy data between blocks.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchCopyBlock {
    /// A batch of block copy items.
    #[prost(message, repeated, tag = "1")]
    pub items: ::prost::alloc::vec::Vec<CopyBlock>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DecodeTokenDistribution {
    /// The embedding ID to decode.
    #[prost(uint32, tag = "1")]
    pub embedding_id: u32,
    #[prost(uint32, tag = "2")]
    pub distribution_id: u32,
}
/// A request to decode a sequence of embeddings into tokens.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchDecodeTokenDistribution {
    /// The embedding IDs to decode.
    #[prost(message, repeated, tag = "1")]
    pub items: ::prost::alloc::vec::Vec<DecodeTokenDistribution>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SampleTopKRequest {
    /// The distribution to sample from.
    #[prost(uint32, tag = "1")]
    pub distribution_id: u32,
    /// The number of samples to draw.
    #[prost(uint32, tag = "2")]
    pub k: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchSampleTopKRequest {
    /// The sampling request items.
    #[prost(message, repeated, tag = "1")]
    pub items: ::prost::alloc::vec::Vec<SampleTopKRequest>,
}
/// The response containing decoded tokens.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SampleTopKResponse {
    /// The decoded token IDs.
    #[prost(uint32, repeated, tag = "1")]
    pub token_ids: ::prost::alloc::vec::Vec<u32>,
    #[prost(float, repeated, tag = "2")]
    pub probabilities: ::prost::alloc::vec::Vec<f32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchSampleTopKResponse {
    /// The response items.
    #[prost(message, repeated, tag = "1")]
    pub items: ::prost::alloc::vec::Vec<SampleTopKResponse>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetInfoRequest {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetInfoResponse {
    #[prost(string, tag = "1")]
    pub version: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub model_name: ::prost::alloc::string::String,
    #[prost(uint32, tag = "3")]
    pub block_size: u32,
    #[prost(uint32, tag = "4")]
    pub num_available_blocks: u32,
    #[prost(uint32, tag = "5")]
    pub num_available_embeddings: u32,
    #[prost(uint32, tag = "6")]
    pub num_available_distributions: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Request {
    #[prost(uint32, tag = "1")]
    pub correlation_id: u32,
    #[prost(oneof = "request::Command", tags = "2, 3, 4, 5, 6, 7, 8, 9, 10")]
    pub command: ::core::option::Option<request::Command>,
}
/// Nested message and enum types in `Request`.
pub mod request {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Command {
        #[prost(message, tag = "2")]
        Allocate(super::BatchAllocate),
        #[prost(message, tag = "3")]
        Deallocate(super::BatchDeallocate),
        #[prost(message, tag = "4")]
        EmbedText(super::BatchEmbedText),
        #[prost(message, tag = "5")]
        FillBlock(super::BatchFillBlock),
        #[prost(message, tag = "6")]
        MaskBlock(super::BatchMaskBlock),
        #[prost(message, tag = "7")]
        CopyBlock(super::BatchCopyBlock),
        #[prost(message, tag = "8")]
        DecodeTokenDistribution(super::BatchDecodeTokenDistribution),
        #[prost(message, tag = "9")]
        SampleTopKRequest(super::BatchSampleTopKRequest),
        #[prost(message, tag = "10")]
        GetInfo(super::GetInfoRequest),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Response {
    #[prost(uint32, tag = "1")]
    pub correlation_id: u32,
    #[prost(oneof = "response::Command", tags = "2, 3")]
    pub command: ::core::option::Option<response::Command>,
}
/// Nested message and enum types in `Response`.
pub mod response {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Command {
        #[prost(message, tag = "2")]
        SampleTopK(super::BatchSampleTopKResponse),
        #[prost(message, tag = "3")]
        GetInfo(super::GetInfoResponse),
    }
}
/// -----------------------------------------------------------------------------
/// Enum for kinds of objects.
/// -----------------------------------------------------------------------------
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ObjectKind {
    /// Default or unspecified kind.
    Unspecified = 0,
    /// Key-value block.
    KvBlock = 1,
    /// Embedding.
    Emb = 2,
    /// Distribution.
    Dist = 3,
}
impl ObjectKind {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            ObjectKind::Unspecified => "OBJECT_KIND_UNSPECIFIED",
            ObjectKind::KvBlock => "OBJECT_KIND_KV_BLOCK",
            ObjectKind::Emb => "OBJECT_KIND_EMB",
            ObjectKind::Dist => "OBJECT_KIND_DIST",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "OBJECT_KIND_UNSPECIFIED" => Some(Self::Unspecified),
            "OBJECT_KIND_KV_BLOCK" => Some(Self::KvBlock),
            "OBJECT_KIND_EMB" => Some(Self::Emb),
            "OBJECT_KIND_DIST" => Some(Self::Dist),
            _ => None,
        }
    }
}
