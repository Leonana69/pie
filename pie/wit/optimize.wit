interface optimize {

    use core.{queue};
    use forward-text.{distribution-result};
    use allocate.{object-id};

    allocate-adapters: func(
        queue: borrow<queue>,
        adapters: list<object-id>
    );

    deallocate-adapters: func(
        queue: borrow<queue>,
        adapters: list<object-id>
    );

    export-adapter: func(
        queue: borrow<queue>,
        adapter: object-id,
        name: string
    );

    unexport-adapter: func(
        queue: borrow<queue>,
        name: string
    );

    import-adapter: func(
        queue: borrow<queue>,
        adapter: object-id,
        name: string
    );

    initialize-adapter: func(
        queue: borrow<queue>,
        adapter: object-id,
        rank: u32,
        alpha: f32,
        population-size: u32,
        mu-fraction: f32,
        initial-sigma: f32
    );

    mutate-adapters: func(
        queue: borrow<queue>,
        adapters: list<object-id>,
        parent: object-id,
        seeds: list<s64>,
    );

    update-adapter: func(
        queue: borrow<queue>,
        adapter: object-id,
        scores: list<f32>,
        seeds: list<s64>,
        max-sigma: f32
    );

    forward-with-adapter: func(
        queue: borrow<queue>,
        adapter: object-id,
        last-kv-page-len: u32,
        kv-page-ids: list<object-id>,
        tokens: list<u32>,
        positions: list<u32>,
        mask: list<list<u32>>,
        output-indices: list<u32>,
    ) -> option<distribution-result>;

}